; REQUIRES: regkeys, spirv-as, dg2-supported, llvm-15-plus

; RUN: spirv-as --target-env spv1.0 -o %t.spv %s

; LLVM with opaque pointers:
; RUN: ocloc compile -spirv_input -file %t.spv -device dg2 -options " -igc_opts 'EnableOpaquePointersBackend=1, ShaderDumpTranslationOnly=1'" 2>&1 | FileCheck %s
; LLVM with typed pointers/default pointer typing:
; RUN: ocloc compile -spirv_input -file %t.spv -device dg2 -options " -igc_opts 'ShaderDumpTranslationOnly=1'" 2>&1 | FileCheck %s

; CHECK-LABEL: spir_kernel void @test

; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPU3AS1Dh(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}})
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPU3AS1Dh(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}})
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPU3AS1Dh(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}})
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPU3AS1Dh(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}})
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPU3AS3Dh(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}})
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPU3AS3Dh(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}})
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPU3AS3Dh(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}})
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPU3AS3Dh(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}})
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPDh(float {{.*}}, i32 0, {{half\*|ptr}} undef)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPDh(float {{.*}}, i32 0, {{half\*|ptr}} undef)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPDh(float {{.*}}, i32 0, {{half\*|ptr}} undef)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_halffiPDh(float {{.*}}, i32 0, {{half\*|ptr}} undef)

; CHECK-LABEL: spir_kernel void @testRTE

; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 0)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 0)

; CHECK-LABEL: spir_kernel void @testRTZ

; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 1)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 1)

; CHECK-LABEL: spir_kernel void @testRTP

; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 2)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 2)

; CHECK-LABEL: spir_kernel void @testRTN

; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS1Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(1){{.*}}, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPU3AS3Dhi(float {{.*}}, i32 0, {{half|ptr}} addrspace(3){{.*}}, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 3)
; CHECK: call spir_func void @{{[0-9A-z_]+}}vstore_half_rfiPDhi(float {{.*}}, i32 0, {{half\*|ptr}} undef, i32 3)

               OpCapability Addresses
               OpCapability Kernel
               OpCapability Float16Buffer
          %1 = OpExtInstImport "OpenCL.std"
               OpMemoryModel Physical32 OpenCL
               OpEntryPoint Kernel %7 "test"
               OpEntryPoint Kernel %29 "testRTE"
               OpEntryPoint Kernel %45 "testRTZ"
               OpEntryPoint Kernel %61 "testRTP"
               OpEntryPoint Kernel %77 "testRTN"
         %93 = OpString "kernel_arg_type.test.half*,half*,"
         %94 = OpString "kernel_arg_type.testRTE.half*,half*,"
         %95 = OpString "kernel_arg_type.testRTZ.half*,half*,"
         %96 = OpString "kernel_arg_type.testRTP.half*,half*,"
         %97 = OpString "kernel_arg_type.testRTN.half*,half*,"
               OpSource OpenCL_C 200000
       %uint = OpTypeInt 32 0
     %uint_0 = OpConstant %uint 0
       %void = OpTypeVoid
       %half = OpTypeFloat 16
%_ptr_CrossWorkgroup_half = OpTypePointer CrossWorkgroup %half
%_ptr_Workgroup_half = OpTypePointer Workgroup %half
          %6 = OpTypeFunction %void %_ptr_CrossWorkgroup_half %_ptr_Workgroup_half
      %float = OpTypeFloat 32
%_ptr_Function_half = OpTypePointer Function %half
    %float_0 = OpConstant %float 0
         %24 = OpUndef %_ptr_Function_half
          %7 = OpFunction %void None %6
         %pg = OpFunctionParameter %_ptr_CrossWorkgroup_half
         %pl = OpFunctionParameter %_ptr_Workgroup_half
      %entry = OpLabel
         %15 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %pg
         %16 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %pg
         %17 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %pg
         %18 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %pg
         %19 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %pl
         %20 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %pl
         %21 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %pl
         %22 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %pl
         %25 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %24
         %26 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %24
         %27 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %24
         %28 = OpExtInst %void %1 vstore_half %float_0 %uint_0 %24
               OpReturn
               OpFunctionEnd
         %29 = OpFunction %void None %6
       %pg_0 = OpFunctionParameter %_ptr_CrossWorkgroup_half
       %pl_0 = OpFunctionParameter %_ptr_Workgroup_half
    %entry_0 = OpLabel
         %33 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_0 RTE
         %34 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_0 RTE
         %35 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_0 RTE
         %36 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_0 RTE
         %37 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_0 RTE
         %38 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_0 RTE
         %39 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_0 RTE
         %40 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_0 RTE
         %41 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTE
         %42 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTE
         %43 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTE
         %44 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTE
               OpReturn
               OpFunctionEnd
         %45 = OpFunction %void None %6
       %pg_1 = OpFunctionParameter %_ptr_CrossWorkgroup_half
       %pl_1 = OpFunctionParameter %_ptr_Workgroup_half
    %entry_1 = OpLabel
         %49 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_1 RTZ
         %50 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_1 RTZ
         %51 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_1 RTZ
         %52 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_1 RTZ
         %53 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_1 RTZ
         %54 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_1 RTZ
         %55 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_1 RTZ
         %56 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_1 RTZ
         %57 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTZ
         %58 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTZ
         %59 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTZ
         %60 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTZ
               OpReturn
               OpFunctionEnd
         %61 = OpFunction %void None %6
       %pg_2 = OpFunctionParameter %_ptr_CrossWorkgroup_half
       %pl_2 = OpFunctionParameter %_ptr_Workgroup_half
    %entry_2 = OpLabel
         %65 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_2 RTP
         %66 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_2 RTP
         %67 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_2 RTP
         %68 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_2 RTP
         %69 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_2 RTP
         %70 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_2 RTP
         %71 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_2 RTP
         %72 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_2 RTP
         %73 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTP
         %74 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTP
         %75 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTP
         %76 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTP
               OpReturn
               OpFunctionEnd
         %77 = OpFunction %void None %6
       %pg_3 = OpFunctionParameter %_ptr_CrossWorkgroup_half
       %pl_3 = OpFunctionParameter %_ptr_Workgroup_half
    %entry_3 = OpLabel
         %81 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_3 RTN
         %82 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_3 RTN
         %83 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_3 RTN
         %84 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pg_3 RTN
         %85 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_3 RTN
         %86 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_3 RTN
         %87 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_3 RTN
         %88 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %pl_3 RTN
         %89 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTN
         %90 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTN
         %91 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTN
         %92 = OpExtInst %void %1 vstore_half_r %float_0 %uint_0 %24 RTN
               OpReturn
               OpFunctionEnd
